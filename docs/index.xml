<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Virtual Engine Lab on Powered by Deep Learning</title>
    <link>https://zackzhu123.github.io/ICE-engine/</link>
    <description>Recent content in Virtual Engine Lab on Powered by Deep Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zackzhu123.github.io/ICE-engine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://zackzhu123.github.io/ICE-engine/about/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/about/</guid>
      <description>The Background An internal combustion engine (ICE) is a heat engine in which the combustion of a fuel occurs with an oxidizer (usually air) in a combustion chamber that is an integral part of the working fluid flow circuit. In an internal combustion engine, the expansion of the high-temperature and high-pressure gases produced by combustion applies direct force to some component of the engine. The force is applied typically to pistons, turbine blades, rotor or a nozzle.</description>
    </item>
    
    <item>
      <title>Cayman Typography</title>
      <link>https://zackzhu123.github.io/ICE-engine/cayman-typography/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/cayman-typography/</guid>
      <description>Text Text can be **bold**, _italic_, or ~~strikethrough~~. [Links](https://github.com) should be blue with no underlines (unless hovered over).Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).
Paragraph There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.There should be whitespace between paragraphs. There should be whitespace between paragraphs.</description>
    </item>
    
    <item>
      <title>Katex Math Typesetting</title>
      <link>https://zackzhu123.github.io/ICE-engine/katex-math-typesetting/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/katex-math-typesetting/</guid>
      <description>Enable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.
See the online reference of supported TeX functions.
Note: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.
Inline math: $$ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $$ Inline math: \( \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… \)
Block math: $$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$ Block math:</description>
    </item>
    
    <item>
      <title>NASA Images</title>
      <link>https://zackzhu123.github.io/ICE-engine/nasa-images/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/nasa-images/</guid>
      <description>The below images are from the NASA Image and Video Library &amp;ndash; indulge yourself, revel in their beauty. Also, the built-in figure shortcode is shown for each image.
 {{&amp;lt; figure img=&amp;quot;sun.jpg&amp;quot; caption=&amp;quot;The Sun is the star at the center of the Solar System. It is a nearly perfect sphere of hot plasma, with internal convective motion that generates a magnetic field via a dynamo process. It is by far the most important source of energy for life on Earth.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://zackzhu123.github.io/ICE-engine/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/hugo-template-primer/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://zackzhu123.github.io/ICE-engine/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zackzhu123.github.io/ICE-engine/lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zackzhu123.github.io/ICE-engine/lab/</guid>
      <description>Virtual Lab Diesel&amp;nbsp; Petrol  Input
Position: 15 %  Torque: 20 Nm    Get Simulation Results   Output
Air Flow Pressure (Pa):   Engine Speed (rpm):   Fuel Flow Rate (cm^3/min):   const getPrediction = async function (position, torque, type) { if (type === &#34;diesel&#34;) { const model = await tf.loadLayersModel(&#39;https://raw.githubusercontent.com/ex172000/lab-web/master/diesel/model.json&#39;); pred = model.predict(tf.tensor([position, torque]).reshape([1, 2])); return pred.data(); } else { const model = await tf.</description>
    </item>
    
  </channel>
</rss>
